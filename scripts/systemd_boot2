#!/usr/bin/env bash
set -euo pipefail
trap 'echo -e "${RED}Error en línea $LINENO. Comando: $BASH_COMMAND${NC}"' ERR

# Configurar colores
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
NC='\033[0m'

# --- Verificar modo UEFI ---
if [[ ! -d /sys/firmware/efi/efivars ]]; then
    echo -e "${RED}Error: El sistema no está en modo UEFI. systemd-boot requiere UEFI.${NC}"
    exit 1
fi

echo -e "${GREEN}Instalando dependencias principales de Systemd_boot...${NC}"

# ===== Detección mejorada del procesador =====
detect_microcode() {
    local vendor
    vendor=$(lscpu | awk -F': +' '/Vendor ID/{print $2}' | tr -d ' ')
    
    case "$vendor" in
        "GenuineIntel")
            echo -e "${GREEN}Intel detectado. Instalando intel-ucode${NC}"
            microcode="intel-ucode"
            ucode_img="/intel-ucode.img" ;;
        "AuthenticAMD")
            echo -e "${GREEN}AMD detectado. Instalando amd-ucode${NC}"
            microcode="amd-ucode"
            ucode_img="/amd-ucode.img" ;;
        *)
            echo -e "${YELLOW}Procesador no reconocido. No se instalará microcódigo.${NC}"
            microcode=""
            ucode_img="" ;;
    esac
}

# Llamar a la función de detección
detect_microcode

# Instalar microcódigo si se detectó
if [[ -n "$microcode" ]]; then
    pacman -S --needed --noconfirm --overwrite='*' "$microcode"
fi

# --- Verificar montaje de EFI ---
if ! mountpoint -q /boot; then
    echo -e "${RED}Error: /boot no está montado como partición EFI.${NC}"
    exit 1
fi

# Instalar systemd-boot
echo -e "${GREEN}Instalando systemd-boot...${NC}"
bootctl install --path=/boot

# --- Configurar entrada de arranque ---
echo -e "${GREEN}Creando configuración principal...${NC}"
cat << EOF > /boot/loader/loader.conf
default arch.conf
timeout 3
console-mode keep
editor no
EOF

# Obtener UUID de la partición LUKS (ej: /dev/vda2)
crypt_partition="/dev/vda2"
crypt_uuid=$(blkid -s UUID -o value "$crypt_partition")

echo -e "${GREEN}Creando entrada de arranque para UUID: $crypt_uuid${NC}"
cat << EOF > /boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd $ucode_img
initrd /initramfs-linux.img
options cryptdevice=UUID=$crypt_uuid:cryptlvm root=/dev/vol01/root rw
EOF

# --- Configurar mkinitcpio ---
echo -e "${GREEN}Configurando hooks para descifrado LUKS...${NC}"
hooks_file="/etc/mkinitcpio.conf"
required_hooks=("base" "systemd" "autodetect" "keyboard" "sd-vconsole" "modconf" "block" "sd-encrypt" "lvm2" "filesystems" "fsck")

sed -i 's/^HOOKS=.*/HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)/' "$hooks_file"

# Verificar hooks críticos
for hook in "${required_hooks[@]}"; do
    if ! grep -q "$hook" <<< "$(grep ^HOOKS "$hooks_file")"; then
        echo -e "${RED}Error: Hook crítico '$hook' faltante en mkinitcpio.conf${NC}"
        exit 1
    fi
done

# Regenerar initramfs
echo -e "${GREEN}Regenerando initramfs...${NC}"
mkinitcpio -P

# --- Verificación final ---
echo -e "\n${BLUE}=== Configuración completada ==="
echo -e "Partición EFI: $(findmnt -n -o SOURCE /boot)"
echo -e "UUID utilizado: $crypt_uuid"
echo -e "Entrada de arranque:"
cat /boot/loader/entries/arch.conf
echo -e "=============================${NC}\n"

# Instalación de paquetes adicionales
echo -e "${GREEN}==== EXTRAS ====${NC}"
./extras

